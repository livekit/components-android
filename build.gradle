// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    apply from: 'client-sdk-android/deps.gradle'

    dependencies {
        classpath "com.android.tools.build:gradle:$android_build_tools_version"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:6.21.0"
        classpath 'app.cash.molecule:molecule-gradle-plugin:1.4.3'
    }
}

plugins {
    id 'org.jetbrains.kotlin.android' version "$kotlin_version" apply false
    id 'org.jetbrains.kotlin.plugin.serialization' version "$kotlin_version" apply false
    id 'org.jetbrains.dokka' version "1.9.0" apply false
    id("io.github.gradle-nexus.publish-plugin") version "2.0.0"
}

subprojects {
    apply plugin: "com.diffplug.spotless"
    spotless {
        // optional: limit format enforcement to just the files changed by this feature branch
        ratchetFrom 'origin/main'

        format 'misc', {
            // define the files to apply `misc` to
            target '*.gradle', '*.md', '.gitignore'

            // define the steps to apply to those files
            trimTrailingWhitespace()
            indentWithSpaces()
            endWithNewline()
        }
        java {
            // apply a specific flavor of google-java-format
            googleJavaFormat('1.17.0').aosp().reflowLongStrings()
            // fix formatting of type annotations
            formatAnnotations()
            // make sure every file has the following copyright header.
            // optionally, Spotless can set copyright years by digging
            // through git history (see "license" section below)
            licenseHeaderFile rootProject.file("LicenseHeaderFile.txt")
            removeUnusedImports()
        }
        kotlin {
            target("src/*/java/**/*.kt")
            targetExclude(
                    "src/*/java/**/FFTAudioAnalyzer.kt", // Different license
            )
            ktlint("0.50.0")
                    .setEditorConfigPath("$rootDir/.editorconfig")
            licenseHeaderFile(rootProject.file("LicenseHeaderFile.txt"))
                    .named('license')
            endWithNewline()
        }
    }
}

group = GROUP
version = VERSION_NAME

def getRepositoryUsername() {
    return hasProperty('nexusUsername') ? nexusUsername : ""
}

def getRepositoryPassword() {
    return hasProperty('nexusPassword') ? nexusPassword : ""
}

nexusPublishing {
    packageGroup = GROUP
    repositories {
        maven {
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
            username = getRepositoryUsername()
            password = getRepositoryPassword()
            stagingProfileId = STAGING_PROFILE_ID
        }
    }
}
