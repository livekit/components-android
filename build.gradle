// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    apply from: 'client-sdk-android/deps.gradle'

    dependencies {
        classpath "com.android.tools.build:gradle:$android_build_tools_version"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:6.21.0"
        classpath 'app.cash.molecule:molecule-gradle-plugin:0.9.0'
    }
}

plugins {
    id 'com.android.library' version '8.0.0' apply false
    id 'com.android.application' version '8.0.0' apply false
    id 'org.jetbrains.kotlin.android' version "$kotlin_version" apply false
    id 'org.jetbrains.kotlin.plugin.serialization' version "$kotlin_version" apply false
    id 'org.jetbrains.dokka' version "1.9.0" apply false
}

apply plugin: 'io.codearte.nexus-staging'

subprojects {
    apply plugin: "com.diffplug.spotless"
    spotless {
        // optional: limit format enforcement to just the files changed by this feature branch
        ratchetFrom 'origin/main'

        format 'misc', {
            // define the files to apply `misc` to
            target '*.gradle', '*.md', '.gitignore'

            // define the steps to apply to those files
            trimTrailingWhitespace()
            indentWithSpaces()
            endWithNewline()
        }
        java {
            // apply a specific flavor of google-java-format
            googleJavaFormat('1.17.0').aosp().reflowLongStrings()
            // fix formatting of type annotations
            formatAnnotations()
            // make sure every file has the following copyright header.
            // optionally, Spotless can set copyright years by digging
            // through git history (see "license" section below)
            licenseHeaderFile rootProject.file("LicenseHeaderFile.txt")
            removeUnusedImports()
        }
        kotlin {
            target("src/*/java/**/*.kt")
            ktlint("0.50.0")
                    .setEditorConfigPath("$rootDir/.editorconfig")
            licenseHeaderFile(rootProject.file("LicenseHeaderFile.txt"))
                    .named('license')
            endWithNewline()
        }
    }
}

nexusStaging {
    serverUrl = "https://s01.oss.sonatype.org/service/local/"
    packageGroup = GROUP
    stagingProfileId = STAGING_PROFILE_ID
}

afterEvaluate {
    // These aren't supported for snapshots. From nexus staging plugin.
    if (VERSION_NAME.contains("SNAPSHOT")) {
        ["closeAndReleaseRepository",
                "closeRepository",
                "createRepository",
                "getStagingProfile",
                "releaseRepository"]
                .forEach { taskName ->
                    getTasksByName(taskName, false).forEach { task -> task.enabled = false }
                }
    }
}